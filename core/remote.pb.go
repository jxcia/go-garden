// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote.proto

package core

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SyncRouteReq struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRouteReq) Reset()         { *m = SyncRouteReq{} }
func (m *SyncRouteReq) String() string { return proto.CompactTextString(m) }
func (*SyncRouteReq) ProtoMessage()    {}
func (*SyncRouteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

func (m *SyncRouteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRouteReq.Unmarshal(m, b)
}
func (m *SyncRouteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRouteReq.Marshal(b, m, deterministic)
}
func (m *SyncRouteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRouteReq.Merge(m, src)
}
func (m *SyncRouteReq) XXX_Size() int {
	return xxx_messageInfo_SyncRouteReq.Size(m)
}
func (m *SyncRouteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRouteReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRouteReq proto.InternalMessageInfo

func (m *SyncRouteReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SyncRouteRes struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRouteRes) Reset()         { *m = SyncRouteRes{} }
func (m *SyncRouteRes) String() string { return proto.CompactTextString(m) }
func (*SyncRouteRes) ProtoMessage()    {}
func (*SyncRouteRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{1}
}

func (m *SyncRouteRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRouteRes.Unmarshal(m, b)
}
func (m *SyncRouteRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRouteRes.Marshal(b, m, deterministic)
}
func (m *SyncRouteRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRouteRes.Merge(m, src)
}
func (m *SyncRouteRes) XXX_Size() int {
	return xxx_messageInfo_SyncRouteRes.Size(m)
}
func (m *SyncRouteRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRouteRes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRouteRes proto.InternalMessageInfo

func (m *SyncRouteRes) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*SyncRouteReq)(nil), "core.syncRouteReq")
	proto.RegisterType((*SyncRouteRes)(nil), "core.syncRouteRes")
}

func init() { proto.RegisterFile("remote.proto", fileDescriptor_eefc82927d57d89b) }

var fileDescriptor_eefc82927d57d89b = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0xce, 0x2f, 0x4a, 0x55, 0x52,
	0xe2, 0xe2, 0x29, 0xae, 0xcc, 0x4b, 0x0e, 0xca, 0x2f, 0x2d, 0x49, 0x0d, 0x4a, 0x2d, 0x14, 0x12,
	0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95,
	0xd4, 0x50, 0xd4, 0x14, 0x0b, 0x89, 0x71, 0xb1, 0x15, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x80, 0x55,
	0x71, 0x04, 0x41, 0x79, 0x46, 0xf6, 0x20, 0x71, 0x90, 0x0d, 0x42, 0xa6, 0x5c, 0x9c, 0x70, 0x1d,
	0x42, 0x42, 0x7a, 0x20, 0x9b, 0xf4, 0x90, 0xad, 0x91, 0xc2, 0x14, 0x2b, 0x56, 0x62, 0x70, 0x62,
	0x8f, 0x62, 0xd5, 0x07, 0x89, 0x27, 0xb1, 0x81, 0x9d, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x65, 0xd8, 0xc8, 0xdc, 0xb2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteClient interface {
	SyncRoute(ctx context.Context, in *SyncRouteReq, opts ...grpc.CallOption) (*SyncRouteRes, error)
}

type remoteClient struct {
	cc *grpc.ClientConn
}

func NewRemoteClient(cc *grpc.ClientConn) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) SyncRoute(ctx context.Context, in *SyncRouteReq, opts ...grpc.CallOption) (*SyncRouteRes, error) {
	out := new(SyncRouteRes)
	err := c.cc.Invoke(ctx, "/core.remote/syncRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteServer is the server API for Remote service.
type RemoteServer interface {
	SyncRoute(context.Context, *SyncRouteReq) (*SyncRouteRes, error)
}

// UnimplementedRemoteServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteServer struct {
}

func (*UnimplementedRemoteServer) SyncRoute(ctx context.Context, req *SyncRouteReq) (*SyncRouteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRoute not implemented")
}

func RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {
	s.RegisterService(&_Remote_serviceDesc, srv)
}

func _Remote_SyncRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).SyncRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.remote/SyncRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).SyncRoute(ctx, req.(*SyncRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Remote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "syncRoute",
			Handler:    _Remote_SyncRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote.proto",
}
